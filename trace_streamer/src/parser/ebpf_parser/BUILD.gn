# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../build/ts.gni")
ohos_source_set("ebpf_parser_src") {
  subsystem_name = "${OHOS_PROFILER_SUBSYS_NAME}"
  part_name = "${OHOS_PROFILER_PART_NAME}"
  if (!is_independent_compile) {
    configs = [ "${TS_DIR}/gn:ts_config" ]
  }
  sources = [
    "bio_latency_data_parser.cpp",
    "ebpf_base.cpp",
    "ebpf_data_parser.cpp",
    "ebpf_data_reader.cpp",
    "ebpf_splitter.cpp",
    "file_system_data_parser.cpp",
    "paged_memory_data_parser.cpp",
  ]
  include_dirs = [
    ".",
    "../",
    "../..",
    "../../trace_data",
    "../../base",
    "../../include",
    "../../filter",
    "../../cfg",
    "../../trace_streamer",
    "../../proto_reader/include",
    "${THIRD_PARTY}/protobuf/src",
    "${THIRD_PARTY}/sqlite/include",
    "${THIRD_PARTY}/bounds_checking_function/include",
  ]
  include_dirs += [
    "${SRC}/trace_data/trace_stdtype",
    "${SRC}/trace_data/trace_stdtype/ftrace",
    "${SRC}/trace_data/trace_stdtype/ftrace/template",
    "${SRC}/trace_data/trace_stdtype/hilog",
    "${SRC}/trace_data/trace_stdtype/hiperf",
    "${SRC}/trace_data/trace_stdtype/hisysevent",
    "${SRC}/trace_data/trace_stdtype/htrace",
    "${SRC}/trace_data/trace_stdtype/measure",
  ]
  if (is_mingw || is_mac) {
    include_dirs += [ "${THIRD_PARTY}/elfutils/libelf" ]
  }
  if (enable_ts_utest && !use_wasm) {
    cflags = [
      "-fprofile-arcs",
      "-ftest-coverage",
    ]
    ldflags = [
      "-fprofile-arcs",
      "-ftest-coverage",
      "--coverage",
    ]
    if (is_test) {
      cflags += [ "-D IS_UT" ]
    }
  }
  public_deps = [ "${OHOS_TRACE_STREAMER_PROTOS_DIR}/protos/types/plugins/memory_data:memory_data_reader" ]
  include_dirs += [
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/nonlinux",
    "${THIRD_PARTY}/perf_include/linux",
    "${THIRD_PARTY}/hiperf/include",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/innerkits/unwinder/include",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/common",
    "${THIRD_PARTY}/hiperf/include/nonlinux/linux",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/common/dfxutil",
    "${THIRD_PARTY}/hiperf/include/nonlinux/",
    "${THIRD_PARTY}/perf_include/libbpf",
  ]
}

group("ebpf_parser") {
  deps = [
    ":ebpf_parser_src",
    "${THIRD_PARTY}/protobuf:protobuf_lite_static",
    "${THIRD_PARTY}/protobuf:protobuf_static",
  ]
}
