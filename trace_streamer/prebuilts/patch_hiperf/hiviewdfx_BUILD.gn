# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/ohos.gni")
import("//build/ts.gni")
ohos_source_set("hiviewdfx_source") {
  configs -= [ trace_cfg_path ]
  configs += [ "${TS_DIR}/gn:hiperf_trace_cfg" ]
  subsystem_name = "developtools"
  part_name = "smartperf_host"
  cflags = [ "-D ALWAYSTRUE" ]
  if (!is_independent_compile) {
    configs = [ "${TS_DIR}/gn:ts_config" ]
  }
  include_dirs = [ "${THIRD_PARTY}/perf_include/hiviewdfx/hilog/include" ]
  include_dirs += [ "${THIRD_PARTY}/bounds_checking_function/include" ]
  include_dirs += [
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/common/dfxlog",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/common/dfxutil",
    "${THIRD_PARTY}/perf_include/hiviewdfx/hilog/include",
  ]
  sources = [
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/common/dfxlog/dfx_log.cpp",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/common/dfxutil/dfx_util.cpp",
  ]
  include_dirs += [
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/common",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/nonlinux",
  ]

  include_dirs += [ "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/innerkits/unwinder/include" ]
  include_dirs += [
    "${THIRD_PARTY}/hiperf/include",
    "${THIRD_PARTY}/hiperf/include/nonlinux",
    "${THIRD_PARTY}/hiperf/include/nonlinux/linux",
  ]
  if (is_mingw) {
    cflags += [ "-includeMingW64Fix.h" ]
    include_dirs += [ "${THIRD_PARTY}/libunwind/include/mingw" ]
  }
  if (use_wasm) {
    include_dirs +=
        [ "${PREBUILTS}/emsdk/emsdk/emscripten/cache/sysroot/include/" ]
  }
  sources += [
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/innerkits/unwinder/dfx_elf.cpp",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/innerkits/unwinder/dfx_elf_parser.cpp",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/innerkits/unwinder/dfx_map.cpp",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/innerkits/unwinder/dfx_maps.cpp",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/innerkits/unwinder/dfx_memory.cpp",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/innerkits/unwinder/dfx_mmap.cpp",
    "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/innerkits/unwinder/dfx_symbols.cpp",
  ]
  if (is_debug) {
    sources += [ "${THIRD_PARTY}/perf_include/hiviewdfx/faultloggerd/interfaces/innerkits/unwinder/dfx_accessors.cpp" ]
  }
}

group("hiviewdfx") {
  deps = [
    ":hiviewdfx_source",
    "${THIRD_PARTY}/bounds_checking_function:libsec_static",
  ]
}
