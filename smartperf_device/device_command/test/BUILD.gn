# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../build/config.gni")

module_output_path = "${OHOS_SMARTPERF_DEVICE_TEST_MODULE_OUTPUT_PATH}/sp_daemon"
config("module_private_config") {
  visibility = [ ":*" ]
}

ohos_unittest("sp_daemon_ut") {
  module_out_path = module_output_path
  sources = [
    "../collector/src/AI_schedule.cpp",
    "../collector/src/ByTrace.cpp",
    "../collector/src/CPU.cpp",
    "../collector/src/Capture.cpp",
    "../collector/src/DDR.cpp",
    "../collector/src/Dubai.cpp",
    "../collector/src/FPS.cpp",
    "../collector/src/FileDescriptor.cpp",
    "../collector/src/GPU.cpp",
    "../collector/src/GameEvent.cpp",
    "../collector/src/GpuCounter.cpp",
    "../collector/src/GpuCounterCallback.cpp",
    "../collector/src/Network.cpp",
    "../collector/src/Power.cpp",
    "../collector/src/RAM.cpp",
    "../collector/src/Temperature.cpp",
    "../collector/src/Threads.cpp",
    "../collector/src/cpu_info.cpp",
    "../cmds/src/control_call_cmd.cpp",
    "../cmds/src/editor_command.cpp",
    "../collector/src/effective.cpp",
    "../collector/src/hiperf.cpp",
    "../collector/src/lock_frequency.cpp",
    "../collector/src/navigation.cpp",
    "../collector/src/parse_slide_fps_trace.cpp",
    "../collector/src/sdk_data_recv.cpp",
    "../scenarios/src/parse_click_complete_trace.cpp",
    "../scenarios/src/parse_click_response_trace.cpp",
    "../scenarios/src/parse_radar.cpp",
    "../scenarios/src/stalling_rate_trace.cpp",
    "../services/ipc/src/sp_server_socket.cpp",
    "../services/ipc/src/sp_thread_socket.cpp",
    "../services/task_mgr/src/sp_task.cpp",
    "../utils/src/GetLog.cpp",
    "../utils/src/service_plugin.cpp",
    "../utils/src/sp_log.cpp",
    "../utils/src/sp_profiler_factory.cpp",
    "../utils/src/startup_delay.cpp",
    "../utils/src/sp_utils.cpp",
    "../heartbeat.cpp",
    "unittest/bytrace_test.cpp",
    "unittest/control_call_cmd_test.cpp",
    "unittest/ddr_test.cpp",
    "unittest/dubai_test.cpp",
    "unittest/editor_command_test.cpp",
    "unittest/filedescriptor_test.cpp",
    "unittest/fps_test.cpp",
    "unittest/gpuCounter_test.cpp",
    "unittest/parse_click_complete_trace_test.cpp",
    "unittest/parse_radar_test.cpp",
    "unittest/parse_slide_fps_trace_test.cpp",
    "unittest/power_test.cpp",
    "unittest/ram_test.cpp",
    "unittest/sdk_data_recv_test.cpp",
    "unittest/smartperf_main_test.cpp",
    "unittest/sp_daemon_test.cpp",
    "unittest/sp_server_socket_test.cpp",
    "unittest/sp_task_test.cpp",
    "unittest/sp_utils_test.cpp",
    "unittest/stalling_rate_trace_test.cpp",
    "unittest/startup_delay_test.cpp",
    "unittest/threads_test.cpp",
  ]
  include_dirs = [
    "${OHOS_SMARTPERF_HOST_DIR}/smartperf_device/device_command/include",
  ]
  deps = [
    "${OHOS_SMARTPERF_HOST_DIR}/smartperf_device/device_command:SP_daemon",
  ]
  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hiview:libucollection_utility",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libpng:libpng",
    "samgr:samgr_proxy",
    "window_manager:libdm",
    "window_manager:libwm",
  ]

  configs = [ "//build/config/compiler:exceptions" ]

  subsystem_name = "${OHOS_SMARTPERF_DEVICE_SUBSYS_NAME}"
  part_name = "${OHOS_SMARTPERF_DEVICE_PART_NAME}"

  if (smartperf_arkxtest_able) {
    external_deps += [ "arkxtest:test_server_client" ]
    defines = [ "ARKTEST_ENABLE" ]
  }
}

group("unittest") {
  testonly = true
  deps = [ ":sp_daemon_ut" ]
}

group("fuzztest") {
  testonly = true
  deps = [ "fuzztest/spdaemon_fuzzer:fuzztest" ]
}
