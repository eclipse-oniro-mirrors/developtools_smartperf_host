# Copyright (c) Huawei Technologies Co., Ltd. 2023. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../build/ts.gni")

config("hiperf_parser_cfg") {
  if (!is_independent_compile) {
    configs = [ "${TS_DIR}/gn:ts_config" ]
  }
  if (enable_ts_utest && !use_wasm) {
    cflags = [
      "-fprofile-arcs",
      "-ftest-coverage",
    ]
    ldflags = [
      "-fprofile-arcs",
      "-ftest-coverage",
      "--coverage",
    ]
    if (is_test) {
      cflags += [ "-D IS_UT" ]
    }
  }
  include_dirs = [
    ".",
    "../../base",
    "../../cfg",
    "../../include",
    "../../",
    "../../filter",
    "../../trace_data",
    "..",
    "../../trace_streamer",
    "../../proto_reader/include",
    "${THIRD_PARTY}/bounds_checking_function/include",
    "${THIRD_PARTY}/sqlite/include",
    "${THIRD_PARTY}/protobuf/src",
    "${COMMON_LIBRARY}/base/include",
    "${THIRD_PARTY}/googletest/googletest/include",
  ]
  include_dirs += [
    "${SRC}/trace_data/trace_stdtype",
    "${SRC}/trace_data/trace_stdtype/ftrace",
    "${SRC}/trace_data/trace_stdtype/ftrace/template",
    "${SRC}/trace_data/trace_stdtype/hilog",
    "${SRC}/trace_data/trace_stdtype/hiperf",
    "${SRC}/trace_data/trace_stdtype/hisysevent",
    "${SRC}/trace_data/trace_stdtype/htrace",
    "${SRC}/trace_data/trace_stdtype/measure",
    "${SRC}/trace_data/trace_stdtype/xpower",
  ]
  include_dirs += [
    "${THIRD_PARTY}/googletest/googletest/include",
    "${THIRD_PARTY}/perf_include/libbpf",
    "${THIRD_PARTY}/perf_include/include",
    "${THIRD_PARTY}/perf_include",
    "${THIRD_PARTY}/perf_include/linux",
    "../hiperf_parser",
    "../hiperf_parser/include",
    "${COMMON_LIBRARY}/base/include",
    "${THIRD_PARTY}/sqlite",
  ]
  if (enable_addr2line) {
    include_dirs += [
      "${LLVM_ROOT}/include",
      "$root_gen_dir/llvm/include",
    ]
  }
  if (is_mingw || is_mac) {
    include_dirs += [ "${THIRD_PARTY}/libbpf/include/uapi" ]
  }
}

ohos_static_library("hiperf_parser") {
  subsystem_name = "${OHOS_PROFILER_SUBSYS_NAME}"
  part_name = "${OHOS_PROFILER_PART_NAME}"
  sources = [ "perf_data_parser.cpp" ]
  public_configs = [
    ":hiperf_parser_cfg",
    "../../filter/perf_filter:hiperf_filter_cfg",
  ]
  public_deps = [
    "${PERF_DIR}/hiperf:hiperf_src",
    "${THIRD_PARTY}/protobuf:protobuf_lite_static",
    "${THIRD_PARTY}/protobuf:protobuf_static",
    "//third_party/perf_include/hiviewdfx:libfaultloggerd",
  ]
  if (enable_addr2line) {
    public_deps += [
      "${LLVM_ROOT}/lib/DebugInfo/DWARF",
      "${LLVM_ROOT}/lib/DebugInfo/PDB",
      "${LLVM_ROOT}/lib/DebugInfo/Symbolize",
      "${LLVM_ROOT}/lib/Demangle",
      "${LLVM_ROOT}/lib/Object",
      "${LLVM_ROOT}/lib/Support",
    ]
  }
}
